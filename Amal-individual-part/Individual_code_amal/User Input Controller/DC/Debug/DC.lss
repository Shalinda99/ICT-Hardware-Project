
DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000820  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060c  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037c  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initDCMotor>:
 */ 

#include "dcmotor.h"

void initDCMotor(){
	DDRB |= (1 << PB3) | (1<<PB2) | (1<<PB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8e 60       	ori	r24, 0x0E	; 14
  70:	87 bb       	out	0x17, r24	; 23
	TCCR0  = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00);
  72:	89 e6       	ldi	r24, 0x69	; 105
  74:	83 bf       	out	0x33, r24	; 51
	OCR0 = 255;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8c bf       	out	0x3c, r24	; 60
  7a:	08 95       	ret

0000007c <setMotorSpeed>:
}

void setMotorSpeed(int bladeMotorSpeed){
	OCR0 = bladeMotorSpeed;
  7c:	8c bf       	out	0x3c, r24	; 60
  7e:	08 95       	ret

00000080 <rotateMotor>:
}

void rotateMotor(){
	PORTB |=(1<<PB1);
  80:	88 b3       	in	r24, 0x18	; 24
  82:	82 60       	ori	r24, 0x02	; 2
  84:	88 bb       	out	0x18, r24	; 24
  86:	08 95       	ret

00000088 <stopMotor>:
}
void stopMotor(){
	PORTB &=~(1<<PB1);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	08 95       	ret

00000090 <main>:

#include "dcmotor.h"

int main()
{
	initDCMotor();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <initDCMotor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	87 ea       	ldi	r24, 0xA7	; 167
  98:	91 e6       	ldi	r25, 0x61	; 97
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0xa>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x14>
  a4:	00 00       	nop
	_delay_ms(2000);
	rotateMotor();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <rotateMotor>
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x2a>
  ba:	00 00       	nop
	_delay_ms(2000);
	stopMotor();
  bc:	0e 94 44 00 	call	0x88	; 0x88 <stopMotor>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	87 ea       	ldi	r24, 0xA7	; 167
  c4:	91 e6       	ldi	r25, 0x61	; 97
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x36>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x40>
  d0:	00 00       	nop
	_delay_ms(2000);
	setMotorSpeed(10);
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 3e 00 	call	0x7c	; 0x7c <setMotorSpeed>
	rotateMotor();
  da:	0e 94 40 00 	call	0x80	; 0x80 <rotateMotor>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x54>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x5e>
  ee:	00 00       	nop
	_delay_ms(2000);
	stopMotor();
  f0:	0e 94 44 00 	call	0x88	; 0x88 <stopMotor>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x6a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x74>
 104:	00 00       	nop
	_delay_ms(2000);	
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
