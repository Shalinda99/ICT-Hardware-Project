
Motor Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a85  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059a  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023f  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int static volatile isMetal;


int main(void)
{
	initUSART(9600);
  7c:	60 e8       	ldi	r22, 0x80	; 128
  7e:	75 e2       	ldi	r23, 0x25	; 37
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 b6 00 	call	0x16c	; 0x16c <initUSART>
	initSteppers();
  88:	0e 94 82 00 	call	0x104	; 0x104 <initSteppers>
    /* Replace with your application code */
    while (1) 
    {
		if (PINB & 1 << PB5){ // Change DC motor speed
  8c:	b5 9b       	sbis	0x16, 5	; 22
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <main+0x2c>
			// metal
			isMetal = 1;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			sendData(HIGH_SPEED);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <sendData>

int static volatile isMetal;


int main(void)
{
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	2a c0       	rjmp	.+84     	; 0xfc <main+0x80>
			isMetal = 1;
			sendData(HIGH_SPEED);
			
			}else{
			// PVC
			isMetal = 0;
  a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			sendData(LOW_SPEED);
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <sendData>
  b6:	f5 cf       	rjmp	.-22     	; 0xa2 <main+0x26>
			// move clutches though rail until ult1_distance-instantDistance==length
			// rotate stepper motor3 forward
			// pipe cutting process
			*/
			// start rotating cutting blade DC motor
			sendData(START);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <sendData>
			// rotate stepper motor4
			rotateStepper_4(1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 86 00 	call	0x10c	; 0x10c <rotateStepper_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	33 ed       	ldi	r19, 0xD3	; 211
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x50>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x5a>
  d6:	00 00       	nop
			_delay_ms(1000);
			rotateStepper_4(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 86 00 	call	0x10c	; 0x10c <rotateStepper_4>
			sendData(STOP);
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <sendData>
  e6:	9a ea       	ldi	r25, 0xAA	; 170
  e8:	26 ee       	ldi	r18, 0xE6	; 230
  ea:	36 e9       	ldi	r19, 0x96	; 150
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	91 50       	subi	r25, 0x01	; 1
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x72>
  f8:	00 00       	nop
		}
		
		int rounds=3;
		
		// repeat cutting process(loop rounds time)
		for (int i = 0; i < rounds; i++)
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	c3 30       	cpi	r28, 0x03	; 3
  fe:	d1 05       	cpc	r29, r1
 100:	dc f2       	brlt	.-74     	; 0xb8 <main+0x3c>
 102:	c4 cf       	rjmp	.-120    	; 0x8c <main+0x10>

00000104 <initSteppers>:
 */

#include "stepper.h"

void initSteppers(){
	DDRA = 0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 108:	84 bb       	out	0x14, r24	; 20
 10a:	08 95       	ret

0000010c <rotateStepper_4>:
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (direction == 1)
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	b9 f4       	brne	.+46     	; 0x13e <rotateStepper_4+0x32>
	{
		/* Rotate  clockwise */
		PORTC = 0x30;
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	85 bb       	out	0x15, r24	; 21
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	81 ee       	ldi	r24, 0xE1	; 225
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <rotateStepper_4+0xe>
 122:	00 c0       	rjmp	.+0      	; 0x124 <rotateStepper_4+0x18>
 124:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x60;
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	85 bb       	out	0x15, r24	; 21
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	81 ee       	ldi	r24, 0xE1	; 225
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <rotateStepper_4+0x24>
 138:	00 c0       	rjmp	.+0      	; 0x13a <rotateStepper_4+0x2e>
 13a:	00 00       	nop
 13c:	08 95       	ret
		_delay_ms(period);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		PORTC = 0x60;
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	85 bb       	out	0x15, r24	; 21
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	81 ee       	ldi	r24, 0xE1	; 225
 146:	94 e0       	ldi	r25, 0x04	; 4
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <rotateStepper_4+0x3c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <rotateStepper_4+0x46>
 152:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x30;
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	85 bb       	out	0x15, r24	; 21
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	81 ee       	ldi	r24, 0xE1	; 225
 15c:	94 e0       	ldi	r25, 0x04	; 4
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <rotateStepper_4+0x52>
 166:	00 c0       	rjmp	.+0      	; 0x168 <rotateStepper_4+0x5c>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <initUSART>:

#include "usart.h"

void initUSART(long USART_BAUDRATE){
	
	DDRD |= 1 << PIND1;//pin1 of portD as OUTPUT
 16c:	21 b3       	in	r18, 0x11	; 17
 16e:	22 60       	ori	r18, 0x02	; 2
 170:	21 bb       	out	0x11, r18	; 17
	

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (BAUD_PRESCALE(USART_BAUDRATE) >> 8);
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	aa 1f       	adc	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	9c 01       	movw	r18, r24
 188:	ad 01       	movw	r20, r26
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	44 1f       	adc	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	44 1f       	adc	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	74 e2       	ldi	r23, 0x24	; 36
 19e:	84 ef       	ldi	r24, 0xF4	; 244
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodsi4>
 1a6:	da 01       	movw	r26, r20
 1a8:	c9 01       	movw	r24, r18
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	89 2f       	mov	r24, r25
 1b2:	9a 2f       	mov	r25, r26
 1b4:	ab 2f       	mov	r26, r27
 1b6:	bb 27       	eor	r27, r27
 1b8:	80 bd       	out	0x20, r24	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) BAUD_PRESCALE(USART_BAUDRATE);
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	29 b9       	out	0x09, r18	; 9

	//Enable the receiver, transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
 1be:	88 e1       	ldi	r24, 0x18	; 24
 1c0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (1 << UCSZ0) | (1<<UCSZ1);
 1c2:	8e e0       	ldi	r24, 0x0E	; 14
 1c4:	80 bd       	out	0x20, r24	; 32
 1c6:	08 95       	ret

000001c8 <sendData>:
	
}

void sendData(uint8_t byte){
	while (! (UCSRA & (1 << UDRE)) );
 1c8:	5d 9b       	sbis	0x0b, 5	; 11
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <sendData>
	{
		UDR = byte;//once transmitter is ready sent eight bit data
 1cc:	8c b9       	out	0x0c, r24	; 12
 1ce:	8f e1       	ldi	r24, 0x1F	; 31
 1d0:	9e e4       	ldi	r25, 0x4E	; 78
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <sendData+0xa>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <sendData+0x10>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <__udivmodsi4>:
 1dc:	a1 e2       	ldi	r26, 0x21	; 33
 1de:	1a 2e       	mov	r1, r26
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	fd 01       	movw	r30, r26
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <__udivmodsi4_ep>

000001e8 <__udivmodsi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	ee 1f       	adc	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	a2 17       	cp	r26, r18
 1f2:	b3 07       	cpc	r27, r19
 1f4:	e4 07       	cpc	r30, r20
 1f6:	f5 07       	cpc	r31, r21
 1f8:	20 f0       	brcs	.+8      	; 0x202 <__udivmodsi4_ep>
 1fa:	a2 1b       	sub	r26, r18
 1fc:	b3 0b       	sbc	r27, r19
 1fe:	e4 0b       	sbc	r30, r20
 200:	f5 0b       	sbc	r31, r21

00000202 <__udivmodsi4_ep>:
 202:	66 1f       	adc	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	88 1f       	adc	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	1a 94       	dec	r1
 20c:	69 f7       	brne	.-38     	; 0x1e8 <__udivmodsi4_loop>
 20e:	60 95       	com	r22
 210:	70 95       	com	r23
 212:	80 95       	com	r24
 214:	90 95       	com	r25
 216:	9b 01       	movw	r18, r22
 218:	ac 01       	movw	r20, r24
 21a:	bd 01       	movw	r22, r26
 21c:	cf 01       	movw	r24, r30
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
