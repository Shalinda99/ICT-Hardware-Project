
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000754  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initSteppers>:
#define F_CPU 8000000UL		
#include <avr/io.h>		
#include <util/delay.h>		

void initSteppers(){
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  70:	84 bb       	out	0x14, r24	; 20
  72:	08 95       	ret

00000074 <rotateStepper_4>:
	// Counterclockwise-0
	// 1 distance unit = 1 rotating

	int period;
	period = 100;
	if (direction == 1)
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	b9 f4       	brne	.+46     	; 0xa6 <rotateStepper_4+0x32>
	{
		/* Rotate  clockwise */
		PORTC = 0x30;
  78:	80 e3       	ldi	r24, 0x30	; 48
  7a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	80 e7       	ldi	r24, 0x70	; 112
  80:	92 e0       	ldi	r25, 0x02	; 2
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <rotateStepper_4+0xe>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <rotateStepper_4+0x18>
  8c:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x60;
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	85 bb       	out	0x15, r24	; 21
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	80 e7       	ldi	r24, 0x70	; 112
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <rotateStepper_4+0x24>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <rotateStepper_4+0x2e>
  a2:	00 00       	nop
  a4:	08 95       	ret
		_delay_ms(period);
	}
	else
	{
		/* Rotate  Counterclockwise  */
		PORTC = 0x60;
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <rotateStepper_4+0x3c>
  b8:	00 c0       	rjmp	.+0      	; 0xba <rotateStepper_4+0x46>
  ba:	00 00       	nop
		_delay_ms(period);
		PORTC = 0x30;
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	85 bb       	out	0x15, r24	; 21
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	80 e7       	ldi	r24, 0x70	; 112
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <rotateStepper_4+0x52>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <rotateStepper_4+0x5c>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <main>:
	}
}

int main(void)
{
	initSteppers();
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <initSteppers>
	rotateStepper_4(1);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3a 00 	call	0x74	; 0x74 <rotateStepper_4>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x12>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x1c>
  f0:	00 00       	nop
	_delay_ms(2000);
	rotateStepper_4(0);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 3a 00 	call	0x74	; 0x74 <rotateStepper_4>
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
